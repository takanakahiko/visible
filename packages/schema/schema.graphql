interface Actor {
  id: ID!
  name: String!
  websites: [Website!]
}

type Account implements Actor {
  id: ID!
  name: String!
  websites: [Website!]
}

type Organization implements Actor {
  id: ID!
  name: String!
  websites: [Website!]
}

type Credential implements Actor {
  id: ID!
  email: String!
  name: String!
  websites: [Website!]
}

enum ReportType {
  OK
  WARN
  ERROR
}

type Report {
  id: ID!
  type: ReportType!
  name: String!
  message: String
  html: String
  xpath: String
  css: String
}

type Website {
  id: ID!
  name: String!
  description: String!
  domain: String!
  diagnosises: [Diagnosis!]
}

type Score {
  error: Int!
  warn: Int!
  ok: Int!
}

type Diagnosis {
  id: ID!
  score: Score!
  screenshot: String!
  reports: [Report!]!
  # website: Website!
}

enum DiagnosisProgressStatus {
  STARTED
  PROCESSING
  DONE
  FAILED
}

type DiagnosisProgress {
  id: ID!
  status: DiagnosisProgressStatus!
  progress: Int!
}

type Query {
  diagnosis(id: ID!): Diagnosis!
  account(id: ID!): Account!
  organization(id: ID!): Organization!
  credential: Credential!
}

type Mutation {
  createDiagnosis(url: String!): Diagnosis!
  deleteDiagnosis(id: ID!): ID!
}

type Subscription {
  diagnosisProgress(id: ID!): DiagnosisProgress!
}

schema {
  query: Query
  mutation: Mutation
}
